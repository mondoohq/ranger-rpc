// Code generated by protoc-gen-rangerrpc version DO NOT EDIT.
// source: oneof.proto

package oneof

import (
	"context"
	"net/url"
	"strings"

	ranger "go.mondoo.com/ranger-rpc"
)

// client implementation

type OneOfClient struct {
	ranger.Client
	httpclient ranger.HTTPClient
	prefix     string
}

func NewOneOfClient(addr string, client ranger.HTTPClient, plugins ...ranger.ClientPlugin) (*OneOfClient, error) {
	base, err := url.Parse(ranger.SanitizeUrl(addr))
	if err != nil {
		return nil, err
	}

	u, err := url.Parse("./OneOf")
	if err != nil {
		return nil, err
	}

	serviceClient := &OneOfClient{
		httpclient: client,
		prefix:     base.ResolveReference(u).String(),
	}
	serviceClient.AddPlugin(plugins...)
	return serviceClient, nil
}
func (c *OneOfClient) Echo(ctx context.Context, in *OneOfRequest) (*OneOfReply, error) {
	out := new(OneOfReply)
	err := c.DoClientRequest(ctx, c.httpclient, strings.Join([]string{c.prefix, "/Echo"}, ""), in, out)
	return out, err
}
